"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set runtimepath^=~/.vim/bundle/ctrlp.vim
" load plugins from vundle
source ~/.vim/plugins.vim

" Abbreviations
abbr funciton function
abbr teh the
abbr tempalte template

set nocompatible " not compatible with vi
set autoread " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

"set nobackup
"set nowritebackup
"set noswapfile
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" set a map leader for more key combos
let mapleader = ','
let g:mapleader = ','

set history=1000 " change history to 1000
set textwidth=120

" Tab control
set noexpandtab " insert tabs rather than spaces for <Tab>
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

if has('mouse')
    set mouse=a
    set ttymouse=xterm2
endif

set clipboard=unnamed

" faster redrawing
set ttyfast

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" highlight syntax
syntax on
set ruler
set number
let g:jsx_ext_required = 0

" Beautify
"map <leader>b :call JsBeautify()<cr>
map <leader>b :Autoformat<cr>
"noremap <F3> :Autoformat<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" re ap esc
inoremap jk <esc>
" set paste toggle
set pastetoggle=<F6>
" toggle paste moe
map <leader>v :set paste!<cr>

" Utilities
map <F7> mzgg=G`z
" Colour Schemes
set background=dark
"set background=light
set encoding=utf8
"let base16colorspace=256  " Access colors present in 256 colorspace"
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors"

"let g:solarized_bold = 1
"let g:solarized_underline = 1
"let g:solarized_italic = 1
"let g:solarized_visiblility = "high"
"let g:solarized_contrast = "high"
colorscheme base16-default-dark
"colorscheme base16-default-dark
colorscheme solarized
"Utilities
let g:auto_save = 1  " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
"let g:auto_save_postsave_hook = 'TagsGenerate'  " this will run :TagsGenerate after each save

"NerdTree

nmap <silent> <leader>k :NERDTreeToggle<cr>
nmap <leader>f :NERDTreeFind<cr>


" map fuzzyfinder (CtrlP)  plugin

let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1

let g:ctrlp_working_path_mode = 'ra'
" The Silver Searcher
set grepprg=ag\ --nogroup\ --nocolor
" bind K to grep word under cursor
nnoremap K :grep! '\b<C-R><C-W>\b'<CR>:cw<CR>
" bind ,space  to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap <leader><SPACE> :Ag<SPACE>

let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'
nnoremap <leader>. :CtrlPTag<cr>

" Replace under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/

"JavaScript
"au FileType javascript call JavaScriptFold()
"let b:javascript_fold=1
" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_python_python_exe = 'pylint'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_html_tidy_exec = 'tidy5'
let g:syntastic_html_tidy_ignore_errors=["<ion-", "discarding unexpected </ion-", " proprietary attribute \"ng-", "<md-", "discarding unexpected </md-", " proprietary attribute \"md-", "ui-view", "discarding unexpected </ui-view", "<fp-", "discarding unexpected </fp-"]
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.
let g:used_javascript_libs = 'underscore,angularjs,react'
" CommonJS
set suffixesadd+=.js
" Git
set diffopt+=vertical
" Editor Config
let g:EditorConfig_exclude_patterns = ['fugitive:.*']

"
" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en-au.utf-8.add

" Turn on spellcheck

nnoremap <silent> <leader>s :set spell!<CR>
" Spell Check for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell
" Auto complete
set complete+=kspell
" You Complete Me
imap <Tab> <C-P>
" Customize mappings snipMate uses to change the key that triggers
" snippets and moves to the next tabstop.
" Now <tab> can be used to autocomplete.
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger

" Typescript
if !exists("g:ycm_semantic_triggers")
	let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

if has('mac') && ($TERM == 'xterm-256color' || $TERM == 'screen-256color')
  map <Esc>OP <F1>
  map <Esc>OQ <F2>
  map <Esc>OR <F3>
  map <Esc>OS <F4>
  map <Esc>[16~ <F5>
  map <Esc>[17~ <F6>
  map <Esc>[18~ <F7>
  map <Esc>[19~ <F8>
  map <Esc>[20~ <F9>
  map <Esc>[21~ <F10>
  map <Esc>[23~ <F11>
  map <Esc>[24~ <F12>
endif

function! ToggleVerbose()
	if !&verbose
		set verbosefile=~/.log/vim/verbose.log
		set verbose=15
	else
		set verbose=0
		set verbosefile=
endif
endfunction
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "~/.vim/ulti-snips/snippets"]
" UltiSnips triggering
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
setlocal indentkeys+=0
set foldmethod=syntax
